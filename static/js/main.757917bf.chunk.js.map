{"version":3,"sources":["n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/common/NavLink/NavLink.tsx","n1-main/m1-ui/routes/routes.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/Login/Login.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/Profile/Profile.tsx","n1-main/m1-ui/Register/Register.tsx","n1-main/m1-ui/PasswordRecovery/PasswordRecovery.tsx","n1-main/m1-ui/Main.tsx","n1-main/m2-bll/loginReducer.ts","n1-main/m2-bll/registrationReducer.ts","n1-main/m2-bll/passwordRecoveryReducer.ts","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/store.ts","n1-main/App.tsx","serviceWorker.ts","index.tsx","n1-main/m1-ui/common/NavLink/NavLink.module.css"],"names":["module","exports","NavigationLink","to","className","styles","navLink","Header","title","Login","Button","name","button","Input","input","Profile","Register","PasswordRecovery","Main","path","render","initialState","loginReducer","state","action","type","registrationReducer","passwordRecoveryReducer","profileReducer","rootReducer","combineReducers","login","registration","passwordRecovery","profile","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,MAAQ,uB,8LCgBXC,EAZQ,WAEnB,OACI,6BACI,kBAAC,IAAD,CAASC,GCPA,SDOWC,UAAWC,IAAOC,SAAtC,SACA,kBAAC,IAAD,CAASH,GCPG,YDOWC,UAAWC,IAAOC,SAAzC,YACA,kBAAC,IAAD,CAASH,GCPW,oBDOWC,UAAWC,IAAOC,SAAjD,oBACA,kBAAC,IAAD,CAASH,GCXE,WDWWC,UAAWC,IAAOC,SAAxC,aEMGC,EAXuB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEpC,OACI,6BACI,kBAAC,EAAD,MACCA,I,OCIEC,EAVsB,SAAC,GAAa,IAAZD,EAAW,EAAXA,MAEnC,OACI,6BACSA,I,iBCGFE,EANuB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEpC,OAAO,4BAAQP,UAAWC,IAAOO,QAASD,I,iBCG/BE,EALsB,WAEjC,OAAO,2BAAOT,UAAWC,IAAOS,SCWrBC,EAZwB,SAAC,GAAa,IAAZP,EAAW,EAAXA,MAErC,OACI,6BACKA,EACD,kBAAC,EAAD,CAAQG,KAAK,QACb,kBAAC,EAAD,QCEGK,EAVyB,SAAC,GAAa,IAAZR,EAAW,EAAXA,MAEtC,OACI,6BACSA,ICMFS,EAViC,SAAC,GAAa,IAAZT,EAAW,EAAXA,MAE9C,OACI,6BACSA,ICgBFU,EAfqB,WAEhC,OACI,6BACI,kBAAC,EAAD,CAAQV,MAAM,WACd,6BACI,kBAAC,IAAD,CAAOW,KRhBA,WQgBeC,OAAQ,kBAAM,kBAAC,EAAD,CAASZ,MAAM,eACnD,kBAAC,IAAD,CAAOW,KRhBF,SQgBeC,OAAQ,kBAAM,kBAAC,EAAD,CAAOZ,MAAM,aAC/C,kBAAC,IAAD,CAAOW,KRhBC,YQgBeC,OAAQ,kBAAM,kBAAC,EAAD,CAAUZ,MAAM,oBACrD,kBAAC,IAAD,CAAOW,KRhBS,oBQgBeC,OAAQ,kBAAM,kBAAC,EAAD,CAAkBZ,MAAM,2B,uBCnB/Ea,EAAe,GAYNC,EANM,WAAoE,IAAnEC,EAAkE,uDAA5CF,EAAcG,EAA8B,uCAGpF,OAFQA,EAAOC,KAERF,GCTLF,EAAe,GAYNK,EANa,WAAoE,IAAnEH,EAAkE,uDAA5CF,EAAcG,EAA8B,uCAG3F,OAFQA,EAAOC,KAERF,GCTLF,EAAe,GAYNM,EANiB,WAAoE,IAAnEJ,EAAkE,uDAA5CF,EAAcG,EAA8B,uCAG/F,OAFQA,EAAOC,KAERF,GCTLF,EAAe,GAYNO,EANQ,WAAoE,IAAnEL,EAAkE,uDAA5CF,EAAcG,EAA8B,uCAGtF,OAFQA,EAAOC,KAERF,GCHLM,EAAcC,YAAgB,CAChCC,MAAOT,EACPU,aAAcN,EACdO,iBAAiBN,EACjBO,QAASN,IASEO,EAFDC,YAAYP,EAAaQ,YAAgBC,MCCxCC,EAZH,WACR,OACI,yBAAKnC,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU+B,MAAOA,GACb,kBAAC,EAAD,UCAAK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASzB,OACP,kBAAC,IAAM0B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAApB,GACJA,EAAaqB,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BzD,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.757917bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__30IxB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1Hoyf\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './NavLink.module.css';\r\nimport {login, profile, register, passwordRecovery} from \"../../routes/routes\";\r\n\r\nconst NavigationLink = () => {\r\n\r\n    return (\r\n        <div>\r\n            <NavLink to={login} className={styles.navLink}>Login</NavLink>\r\n            <NavLink to={register} className={styles.navLink}>Register</NavLink>\r\n            <NavLink to={passwordRecovery} className={styles.navLink}>PasswordRecovery</NavLink>\r\n            <NavLink to={profile} className={styles.navLink}>Profile</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavigationLink;\r\n","//Пути константами для Rout\r\nexport const profile = \"/profile\"\r\nexport const login = \"/login\"\r\nexport const register = \"/register\"\r\nexport const passwordRecovery = \"/passwordRecovery\"\r\n\r\n\r\n","import React from \"react\";\r\nimport NavigationLink from \"../common/NavLink/NavLink\";\r\n\r\ntype OnPropsType = {\r\n    title: string\r\n}\r\n\r\nconst Header: React.FC<OnPropsType> = ({title}) => {\r\n\r\n    return (\r\n        <div>\r\n            <NavigationLink/>\r\n            {title}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\ntype OnPropsType = {\r\n        title: string\r\n}\r\n\r\nconst Login: React.FC<OnPropsType> = ({title}) => {\r\n\r\n    return (\r\n        <div>\r\n                {title}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport styles from './Button.module.css';\r\n\r\ntype OnPropsType = {\r\n    name: string\r\n}\r\n\r\nconst Button: React.FC<OnPropsType> = ({name}) => {\r\n\r\n    return <button className={styles.button}>{name}</button>\r\n\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styles from './Input.module.css';\r\n\r\ntype OnPropsType = {\r\n\r\n}\r\n\r\nconst Input: React.FC<OnPropsType> = () => {\r\n\r\n    return <input className={styles.input}/>\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Button from \"../common/Button/Button\";\r\nimport Input from \"../common/Input/Input\";\r\n\r\ntype OnPropsType = {\r\n    title: string\r\n}\r\n\r\nconst Profile: React.FC<OnPropsType> = ({title}) => {\r\n\r\n    return (\r\n        <div>\r\n            {title}\r\n            <Button name=\"bet\"/>\r\n            <Input/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\n\r\ntype OnPropsType = {\r\n        title: string\r\n}\r\n\r\nconst Register: React.FC<OnPropsType> = ({title}) => {\r\n\r\n    return (\r\n        <div>\r\n                {title}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Register;","import React from \"react\";\r\n\r\ntype OnPropsType = {\r\n        title: string\r\n}\r\n\r\nconst PasswordRecovery: React.FC<OnPropsType> = ({title}) => {\r\n\r\n    return (\r\n        <div>\r\n                {title}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PasswordRecovery;","import React from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Login from \"./Login/Login\";\r\nimport Profile from \"./Profile/Profile\";\r\nimport {login, passwordRecovery, profile, register} from \"./routes/routes\";\r\nimport Register from \"./Register/Register\";\r\nimport PasswordRecovery from \"./PasswordRecovery/PasswordRecovery\";\r\n\r\ntype OnPropsType = {}\r\n\r\nconst Main: React.FC<OnPropsType> = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Header title=\"header\"/>\r\n            <div>\r\n                <Route path={profile} render={() => <Profile title=\"profile\"/>}/>\r\n                <Route path={login} render={() => <Login title=\"login\"/>}/>\r\n                <Route path={register} render={() => <Register title=\"registration\"/>}/>\r\n                <Route path={passwordRecovery} render={() => <PasswordRecovery title=\"passwordRecovery\"/>}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","\r\nconst initialState = {\r\n\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst loginReducer = (state: InitialState = initialState, action: any): InitialState => {\r\n    switch (action.type) {\r\n    }\r\n    return state\r\n}\r\n\r\nexport default loginReducer;","\r\nconst initialState = {\r\n\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst registrationReducer = (state: InitialState = initialState, action: any): InitialState => {\r\n    switch (action.type) {\r\n    }\r\n    return state\r\n}\r\n\r\nexport default registrationReducer;","\r\nconst initialState = {\r\n\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst passwordRecoveryReducer = (state: InitialState = initialState, action: any): InitialState => {\r\n    switch (action.type) {\r\n    }\r\n    return state\r\n}\r\n\r\nexport default passwordRecoveryReducer;","\r\nconst initialState = {\r\n\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst profileReducer = (state: InitialState = initialState, action: any): InitialState => {\r\n    switch (action.type) {\r\n    }\r\n    return state\r\n}\r\n\r\nexport default profileReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport loginReducer from \"./loginReducer\";\r\nimport registrationReducer from \"./registrationReducer\";\r\nimport passwordRecoveryReducer from \"./passwordRecoveryReducer\";\r\nimport profileReducer from \"./profileReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    passwordRecovery:passwordRecoveryReducer,\r\n    profile: profileReducer\r\n\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport Main from \"./m1-ui/Main\";\nimport {Provider} from \"react-redux\";\nimport store from \"./m2-bll/store\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Provider store={store}>\n                    <Main/>\n                </Provider>\n            </HashRouter>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"NavLink_navLink__1AD3T\"};"],"sourceRoot":""}